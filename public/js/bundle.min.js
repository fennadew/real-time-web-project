"use strict";

(function () {
    function r(e, n, t) {
        function o(i, f) {
            if (!n[i]) {
                if (!e[i]) {
                    var c = "function" == typeof require && require;if (!f && c) return c(i, !0);if (u) return u(i, !0);var a = new Error("Cannot find module '" + i + "'");throw a.code = "MODULE_NOT_FOUND", a;
                }var p = n[i] = { exports: {} };e[i][0].call(p.exports, function (r) {
                    var n = e[i][1][r];return o(n || r);
                }, p, p.exports, r, e, n, t);
            }return n[i].exports;
        }for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) {
            o(t[i]);
        }return o;
    }return r;
})()({ 1: [function (require, module, exports) {
        var htmlElements = require('./htmlElements');

        var autoComplete = {
            init: function init() {
                if (htmlElements.nextStationInput && htmlElements.nextStationInput.addEventListener) {
                    this.showList(htmlElements.nextStationInput, htmlElements.nextList);
                    this.showList(htmlElements.lastStationInput, htmlElements.lastList);
                }
            },
            showList: function showList(input, list) {
                var _this = this;

                input.addEventListener("input", function () {
                    fetch('/api?nextStation=' + input.value).then(function (response) {
                        return response.json();
                    }).then(function (myJson) {
                        _this.createList(myJson, input, list);
                    });
                });
            },
            createList: function createList(data, input, list) {
                var _this2 = this;

                this.clearList(list);
                var val = input.value;
                if (val.length > 0) {
                    var _loop = function _loop(i) {
                        if (data[i].name.substr(0, val.length).toUpperCase() === val.toUpperCase()) {
                            var listItem = document.createElement("li");
                            listItem.classList.add("autocomplete-items");
                            listItem.innerHTML = "<span>" + data[i].name.substr(0, val.length) + "</span>";
                            listItem.innerHTML += data[i].name.substr(val.length);
                            listItem.addEventListener("click", function (e) {
                                return function () {
                                    input.value = data[i].name;
                                    _this2.clearList(list);
                                };
                            }(i));
                            list.appendChild(listItem);
                        }
                    };

                    for (var i = 0; i < data.length; i++) {
                        _loop(i);
                    }
                }
            },
            clearList: function clearList(list) {
                var elements = document.getElementsByClassName("autocomplete-items");
                if (elements) {
                    while (list.firstChild) {
                        list.removeChild(list.firstChild);
                    }
                }
            }
        };

        module.exports = autoComplete;
    }, { "./htmlElements": 4 }], 2: [function (require, module, exports) {}, {}], 3: [function (require, module, exports) {
        var htmlElements = require('./htmlElements');

        var formHandler = {
            init: function init() {
                console.log(new Date());
                socketIo.init();
                htmlElements.addButton.addEventListener('click', function (e) {
                    htmlElements.formContainer.classList.remove('hide');
                    htmlElements.body.classList.add('fixed');
                });

                htmlElements.closeButton.addEventListener('click', function (e) {
                    htmlElements.formContainer.classList.add('hide');
                    htmlElements.body.classList.remove('fixed');
                });

                htmlElements.form.addEventListener('submit', function (e) {
                    e.preventDefault();
                    var allFilled = true;
                    for (var i = 0; i < htmlElements.requiredInputs.length; i++) {
                        if (htmlElements.requiredInputs[i].value === "") {
                            allFilled = false;
                            htmlElements.requiredInputs[i].classList.add('error-input');
                        } else {
                            htmlElements.requiredInputs[i].classList.remove('error-input');
                        }
                    }
                    var select = document.getElementsByTagName("select")[0];
                    var option = select.options[select.selectedIndex].value;

                    if (allFilled) {
                        var values = Object.values(htmlElements.form).reduce(function (obj, field) {
                            obj[field.name] = field.value;
                            return obj;
                        }, {});
                        values.notifications = option;
                        console.log(values);
                        socketIo.socket.emit('submit', values);
                    }
                });
            },
            showMessage: function showMessage(output, msg) {
                var msgDisplay = document.querySelector('.msg');
                if (msgDisplay) {
                    htmlElements.form.removeChild(msgDisplay);
                }
                var p = document.createElement("p");
                var text = document.createTextNode(msg);
                p.appendChild(text);
                htmlElements.form.appendChild(p);
                p.classList.add("msg");
                if (output === "success") {
                    p.classList.add("success-msg");
                } else {
                    p.classList.add("warning-msg");
                }
            }
        };

        var socketIo = {
            socket: io(),
            init: function init() {
                this.socket.on('notifications', function (data) {
                    content.addNotifications(data);
                });
                this.socket.on('warning', function (error) {
                    console.log(error);
                    formHandler.showMessage("warning", error);
                });
                this.socket.on('success', function (msg) {
                    console.log(msg);
                    formHandler.showMessage("success", msg);
                });
                this.socket.on('update', function (obj) {
                    content.updateNotications(obj);
                });
                this.socket.on('notificationsHistory', function (noti) {
                    if (noti.length > 0) {
                        content.showNotifications(noti);
                    }
                });
            }
        };

        var content = {
            showNotifications: function showNotifications(notifications) {
                var ul = document.createElement('ul');
                document.querySelector('.empty').classList.add('hidden');
                for (var i = notifications.length - 1; i >= 0; i--) {
                    var li = document.createElement('li');
                    var divBig = document.createElement('div');
                    var divSmall = document.createElement('div');
                    var time = document.createElement('div');
                    var timeText = document.createTextNode("Posted on: " + this.timeConverter(notifications[i].Notificaties[0].time));
                    var updates = document.createElement('span');
                    var updatesCount = document.createTextNode(notifications[i].Notificaties.length + " Notifications");
                    updates.appendChild(updatesCount);
                    time.appendChild(timeText);
                    divBig.classList.add('big');
                    divSmall.classList.add('small');
                    var l = notifications[i].ReisDeel[0].ReisStop.length - 1;
                    var text = document.createTextNode(notifications[i].Notificaties[0].message + " " + notifications[i].ReisDeel[0].VervoerType + " " + notifications[i].ReisDeel[0].ReisStop[l].Naam);
                    var textSmall = "";
                    for (var a = 0; a <= l; a++) {
                        if (a === l) {
                            textSmall += ' ' + notifications[i].ReisDeel[0].ReisStop[a].Naam;
                        } else {
                            textSmall += ' ' + notifications[i].ReisDeel[0].ReisStop[a].Naam + ',';
                        }
                    }
                    var textSmallNode = document.createTextNode(textSmall);

                    divBig.appendChild(text);
                    divSmall.appendChild(textSmallNode);
                    li.appendChild(divBig);
                    li.appendChild(divSmall);
                    li.appendChild(time);
                    li.appendChild(updates);
                    ul.appendChild(li);
                }
                htmlElements.notifications.appendChild(ul);
            },
            updateNotications: function updateNotications(obj) {
                var li = document.querySelectorAll('.notifications li');
                var updateList = li[li.length - 1 - obj.index];
                var count = updateList.querySelector('span');
                count.innerHTML = obj.train.Notificaties.length + " Notifications";
            },
            addNotifications: function addNotifications(notification) {
                var ul = document.querySelector('.notifications ul');
                if (!ul) {
                    ul = document.createElement('ul');
                    htmlElements.notifications.appendChild(ul);
                }
                var li = document.createElement('li');
                var divBig = document.createElement('div');
                var divSmall = document.createElement('div');
                var time = document.createElement('div');
                var updates = document.createElement('span');
                var updatesCount = document.createTextNode(notification.Notificaties.length + " Notifications");
                updates.appendChild(updatesCount);
                var timeText = document.createTextNode("Posted on: " + this.timeConverter(notification.Notificaties[0].time));
                time.appendChild(timeText);
                divBig.classList.add('big');
                divSmall.classList.add('small');
                var l = notification.ReisDeel[0].ReisStop.length - 1;
                var text = document.createTextNode(notification.Notificaties[0].message + " " + notification.ReisDeel[0].VervoerType + " " + notification.ReisDeel[0].ReisStop[l].Naam);
                var textSmall = "";
                for (var a = 0; a <= l; a++) {
                    if (a === l) {
                        textSmall += ' ' + notification.ReisDeel[0].ReisStop[a].Naam;
                    } else {
                        textSmall += ' ' + notification.ReisDeel[0].ReisStop[a].Naam + ',';
                    }
                }
                var textSmallNode = document.createTextNode(textSmall);

                divBig.appendChild(text);
                divSmall.appendChild(textSmallNode);
                li.appendChild(divBig);
                li.appendChild(divSmall);
                li.appendChild(time);
                li.appendChild(updates);
                ul.insertBefore(li, ul.firstChild);
            },
            timeConverter: function timeConverter(unix_timestamp) {
                var date = new Date(unix_timestamp);
                var hours = date.getHours();
                var minutes = "0" + date.getMinutes();
                return hours + ':' + minutes.substr(-2);
            }
        };

        module.exports = formHandler;
    }, { "./htmlElements": 4 }], 4: [function (require, module, exports) {
        var htmlElements = {
            nextStationInput: document.getElementById('nextStation'),
            nextList: document.querySelector(".nextstation-autocomplete"),
            lastStationInput: document.getElementById('lastStation'),
            lastList: document.querySelector(".laststation-autocomplete"),
            retrievingMessage: document.querySelector('.retrieving'),
            errorMessage: document.querySelector('.error'),
            lonInput: document.getElementById('lon'),
            latInput: document.getElementById('lat'),
            body: document.querySelector('body'),
            loader: document.querySelector('.loader'),
            form: document.querySelector("form"),
            formContainer: document.querySelector('.report'),
            requiredInputs: document.querySelectorAll('.required'),
            empty: document.querySelector('.empty'),
            notifications: document.querySelector('.notifications'),
            addButton: document.querySelector('main > button'),
            closeButton: document.querySelector('.report > button')
        };

        module.exports = htmlElements;
    }, {}], 5: [function (require, module, exports) {
        var navigatorGeo = require('./navigator');
        var autoComplete = require('./autoComplete');
        var formHandler = require('./formHandler');

        var app = {
            init: function init() {
                autoComplete.init();
                navigatorGeo.init();
                formHandler.init();
            }
        };

        app.init();
    }, { "./autoComplete": 1, "./formHandler": 3, "./navigator": 6 }], 6: [function (require, module, exports) {
        var htmlElements = require('./htmlElements');

        var navigatorGeo = {
            options: {
                enableHighAccuracy: true,
                timeout: 5000
            },
            callBackNavigator: {
                success: function success(position) {
                    var positionUser = position.coords;
                    htmlElements.lonInput.value = positionUser.longitude;
                    htmlElements.latInput.value = positionUser.latitude;
                    htmlElements.retrievingMessage.classList.add('hidden');
                    htmlElements.errorMessage.classList.add('hidden');
                    htmlElements.loader.classList.add('hidden');
                },
                error: function error(err) {
                    console.log(err.message);
                    htmlElements.errorMessage.classList.remove('hidden');
                    htmlElements.retrievingMessage.classList.add('hidden');
                    htmlElements.loader.classList.add('hidden');
                }
            },
            init: function init() {
                navigator.geolocation.getCurrentPosition(this.callBackNavigator.success, this.callBackNavigator.error, this.options);
            }
        };

        module.exports = navigatorGeo;
    }, { "./htmlElements": 4 }], 7: [function (require, module, exports) {
        arguments[4][2][0].apply(exports, arguments);
    }, { "dup": 2 }] }, {}, [1, 2, 3, 4, 5, 6, 7]);
